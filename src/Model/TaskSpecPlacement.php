<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Model;

class TaskSpecPlacement
{
    /**
     * An array of constraints.
     *
     * @var string[]
     */
    protected $constraints;
    /**
     * Preferences provide a way to make the scheduler aware of factors such as topology. They are provided in order from highest to lowest precedence.
     *
     * @var TaskSpecPlacementPreferencesItem[]
     */
    protected $preferences;
    /**
     * Maximum number of replicas for per node (default value is 0, which is unlimited).
     *
     * @var int
     */
    protected $maxReplicas;
    /**
     * Platforms stores all the platforms that the service's image can.
    run on. This field is used in the platform filter for scheduling.
    If empty, then the platform filter is off, meaning there are no
    scheduling restrictions.

     *
     * @var Platform[]
     */
    protected $platforms;

    /**
     * An array of constraints.
     *
     * @return string[]
     */
    public function getConstraints(): ?array
    {
        return $this->constraints;
    }

    /**
     * An array of constraints.
     *
     * @param string[] $constraints
     *
     * @return self
     */
    public function setConstraints(?array $constraints): self
    {
        $this->constraints = $constraints;

        return $this;
    }

    /**
     * Preferences provide a way to make the scheduler aware of factors such as topology. They are provided in order from highest to lowest precedence.
     *
     * @return TaskSpecPlacementPreferencesItem[]
     */
    public function getPreferences(): ?array
    {
        return $this->preferences;
    }

    /**
     * Preferences provide a way to make the scheduler aware of factors such as topology. They are provided in order from highest to lowest precedence.
     *
     * @param TaskSpecPlacementPreferencesItem[] $preferences
     *
     * @return self
     */
    public function setPreferences(?array $preferences): self
    {
        $this->preferences = $preferences;

        return $this;
    }

    /**
     * Maximum number of replicas for per node (default value is 0, which is unlimited).
     *
     * @return int
     */
    public function getMaxReplicas(): ?int
    {
        return $this->maxReplicas;
    }

    /**
     * Maximum number of replicas for per node (default value is 0, which is unlimited).
     *
     * @param int $maxReplicas
     *
     * @return self
     */
    public function setMaxReplicas(?int $maxReplicas): self
    {
        $this->maxReplicas = $maxReplicas;

        return $this;
    }

    /**
     * Platforms stores all the platforms that the service's image can.
    run on. This field is used in the platform filter for scheduling.
    If empty, then the platform filter is off, meaning there are no
    scheduling restrictions.

     *
     * @return Platform[]
     */
    public function getPlatforms(): ?array
    {
        return $this->platforms;
    }

    /**
     * Platforms stores all the platforms that the service's image can.
    run on. This field is used in the platform filter for scheduling.
    If empty, then the platform filter is off, meaning there are no
    scheduling restrictions.

     *
     * @param Platform[] $platforms
     *
     * @return self
     */
    public function setPlatforms(?array $platforms): self
    {
        $this->platforms = $platforms;

        return $this;
    }
}
