<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class BuildCacheNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Docker\\API\\Model\\BuildCache';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Docker\API\Model\BuildCache;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Docker\API\Model\BuildCache();
        if (property_exists($data, 'ID') && $data->{'ID'} !== null) {
            $object->setID($data->{'ID'});
        }
        if (property_exists($data, 'Parent') && $data->{'Parent'} !== null) {
            $object->setParent($data->{'Parent'});
        }
        if (property_exists($data, 'Type') && $data->{'Type'} !== null) {
            $object->setType($data->{'Type'});
        }
        if (property_exists($data, 'Description') && $data->{'Description'} !== null) {
            $object->setDescription($data->{'Description'});
        }
        if (property_exists($data, 'InUse') && $data->{'InUse'} !== null) {
            $object->setInUse($data->{'InUse'});
        }
        if (property_exists($data, 'Shared') && $data->{'Shared'} !== null) {
            $object->setShared($data->{'Shared'});
        }
        if (property_exists($data, 'Size') && $data->{'Size'} !== null) {
            $object->setSize($data->{'Size'});
        }
        if (property_exists($data, 'CreatedAt') && $data->{'CreatedAt'} !== null) {
            $object->setCreatedAt($data->{'CreatedAt'});
        }
        if (property_exists($data, 'LastUsedAt') && $data->{'LastUsedAt'} !== null) {
            $object->setLastUsedAt($data->{'LastUsedAt'});
        }
        if (property_exists($data, 'UsageCount') && $data->{'UsageCount'} !== null) {
            $object->setUsageCount($data->{'UsageCount'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getID()) {
            $data->{'ID'} = $object->getID();
        }
        if (null !== $object->getParent()) {
            $data->{'Parent'} = $object->getParent();
        }
        if (null !== $object->getType()) {
            $data->{'Type'} = $object->getType();
        }
        if (null !== $object->getDescription()) {
            $data->{'Description'} = $object->getDescription();
        }
        if (null !== $object->getInUse()) {
            $data->{'InUse'} = $object->getInUse();
        }
        if (null !== $object->getShared()) {
            $data->{'Shared'} = $object->getShared();
        }
        if (null !== $object->getSize()) {
            $data->{'Size'} = $object->getSize();
        }
        if (null !== $object->getCreatedAt()) {
            $data->{'CreatedAt'} = $object->getCreatedAt();
        }
        if (null !== $object->getLastUsedAt()) {
            $data->{'LastUsedAt'} = $object->getLastUsedAt();
        }
        if (null !== $object->getUsageCount()) {
            $data->{'UsageCount'} = $object->getUsageCount();
        }

        return $data;
    }
}
